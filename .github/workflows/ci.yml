name: CI

on:
  pull_request:
    branches: [ master, main ]
  push:
    branches: [ master, main ]

jobs:
  build-dev:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and export development image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: development
        tags: nab-bank-api:dev
        outputs: type=docker,dest=/tmp/nab-bank-api-dev.tar
        cache-from: type=gha,scope=dev
        cache-to: type=gha,scope=dev,mode=max

    - name: Upload development image artifact
      uses: actions/upload-artifact@v4
      with:
        name: nab-bank-api-dev-image
        path: /tmp/nab-bank-api-dev.tar
        retention-days: 1

  lint:
    runs-on: ubuntu-latest
    needs: build-dev
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download development image
      uses: actions/download-artifact@v4
      with:
        name: nab-bank-api-dev-image
        path: /tmp

    - name: Load development image
      run: |
        docker load < /tmp/nab-bank-api-dev.tar

    - name: Run linting
      run: |
        docker run --rm -v $(pwd):/app nab-bank-api:dev golangci-lint run --timeout=5m --issues-exit-code=1

  test:
    runs-on: ubuntu-latest
    needs: build-dev
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download development image
      uses: actions/download-artifact@v4
      with:
        name: nab-bank-api-dev-image
        path: /tmp

    - name: Load development image
      run: |
        docker load < /tmp/nab-bank-api-dev.tar

    - name: Run tests with coverage
      run: |
        docker run --rm -v $(pwd):/app -e CGO_ENABLED=1 nab-bank-api:dev go test -race -coverprofile=coverage.out -covermode=atomic ./...

    - name: Generate coverage report
      run: |
        docker run --rm -v $(pwd):/app nab-bank-api:dev go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          coverage.out
          coverage.html
        retention-days: 7

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  # security:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #
  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v3
  #
  #   - name: Build development image
  #     uses: docker/build-push-action@v5
  #     with:
  #       context: .
  #       target: development
  #       tags: nab-bank-api:dev
  #       load: true
  #       cache-from: type=gha
  #       cache-to: type=gha,mode=max
  #
  #   - name: Run security scan
  #     run: |
  #       docker run --rm -v $(pwd):/app nab-bank-api:dev gosec ./...

  build:
    runs-on: ubuntu-latest
    needs: [build-dev, lint, test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build production image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        tags: nab-bank-api:latest
        load: true
        cache-from: |
          type=gha,scope=dev
          type=gha,scope=prod
        cache-to: type=gha,scope=prod,mode=max

    - name: Test production image
      run: |
        # Start the container in the background
        docker run -d --name test-container -p 8080:8080 \
          -e NAB_USERNAME=test \
          -e NAB_PASSWORD=test \
          -e NAB_BASE_URL=https://test.com \
          nab-bank-api:latest
        
        # Wait for the service to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8080/health || exit 1
        
        # Clean up
        docker stop test-container
        docker rm test-container